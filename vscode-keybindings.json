// Place your key bindings in this file to override the defaultsauto[]
[
  {
    "key": "alt+cmd+up",
    "command": "workbench.action.navigateBack"
  },
  {
    "key": "ctrl+-",
    "command": "-workbench.action.navigateBack"
  },
  {
    "key": "ctrl+shift+0",
    "command": "paredit.slurpSexpForward",
    "when": "calva:activated && calva:pareditValid && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+right",
    "command": "-paredit.slurpSexpForward",
    "when": "calva:activated && calva:pareditValid && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+backspace",
    "command": "paredit.killSexpForward",
    "when": "calva:activated && calva:pareditValid && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+backspace",
    "command": "-paredit.killSexpForward",
    "when": "calva:activated && calva:pareditValid && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "alt+r",
    "command": "paredit.spliceSexpKillBackward",
    "when": "calva:activated && calva:pareditValid && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+up",
    "command": "-paredit.spliceSexpKillBackward",
    "when": "calva:activated && calva:pareditValid && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+c alt+n",
    "command": "calva.loadNamespace",
    "when": "calva:activated"
  },
  {
    "key": "ctrl+alt+c ctrl+alt+n",
    "command": "-calva.loadNamespace",
    "when": "calva:activated"
  },
  {
    "key": "ctrl+c ctrl+k",
    "command": "calva.loadFile",
    "when": "calva:activated"
  },
  {
    "key": "ctrl+alt+c enter",
    "command": "-calva.loadFile",
    "when": "calva:activated"
  },
  {
    "key": "ctrl+c ctrl+t",
    "command": "calva.runNamespaceTests",
    "when": "calva:activated"
  },
  {
    "key": "ctrl+alt+c t",
    "command": "-calva.runNamespaceTests",
    "when": "calva:activated"
  },
  {
    "key": "ctrl+c alt+n",
    "command": "calva.setREPLNamespace",
    "when": "calva:activated"
  },
  {
    "key": "ctrl+alt+c alt+n",
    "command": "-calva.setREPLNamespace",
    "when": "calva:activated"
  },
  {
    "key": "ctrl+c ctrl+z",
    "command": "calva.openCljReplWindow"
  },
  {
    "key": "ctrl+alt+c ctrl+alt+e",
    "command": "-calva.evalCurrentFormInREPLWindow",
    "when": "calva:activated"
  },
  {
    "key": "ctrl+c alt+c",
    "command": "calva.connect"
  },
  {
    "key": "ctrl+alt+c ctrl+alt+c",
    "command": "-calva.connect"
  },
  {
    "key": "ctrl+x ctrl+e",
    "command": "calva.evaluateSelection",
    "when": "calva:activated"
  },
  {
    "key": "ctrl+alt+c e",
    "command": "-calva.evaluateSelection",
    "when": "calva:activated"
  },
  {
    "key": "ctrl+=",
    "command": "paredit.sexpRangeExpansion",
    "when": "calva:activated && calva:pareditValid && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+w",
    "command": "-paredit.sexpRangeExpansion",
    "when": "calva:activated && calva:pareditValid && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+c ctrl+r",
    "command": "calva.rerunTests",
    "when": "calva:activated"
  },
  {
    "key": "ctrl+alt+c ctrl+t",
    "command": "-calva.rerunTests",
    "when": "calva:activated"
  },
  {
    "key": "ctrl+k",
    "command": "paredit.killSexpForward",
    "when": "calva:replWindowActive || editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+delete",
    "command": "-paredit.killSexpForward",
    "when": "calva:replWindowActive || editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+delete",
    "command": "-paredit.killSexpForward",
    "when": "calva:replWindowActive || editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "shift+cmd+z",
    "command": "-editor.action.customEditor.redo",
    "when": "focusedCustomEditorIsEditable && !inputFocus"
  },
  {
    "key": "shift+cmd+z",
    "command": "-editor.action.customEditor.redo",
    "when": "focusedCustomEditorIsEditable && !inputFocus"
  },
  {
    "key": "shift+cmd+z",
    "command": "-editor.action.customEditor.redo",
    "when": "focusedCustomEditorIsEditable && !inputFocus"
  },
  {
    "key": "shift+cmd+z",
    "command": "-editor.action.customEditor.redo",
    "when": "focusedCustomEditorIsEditable && !inputFocus"
  },
  {
    "key": "shift+cmd+z",
    "command": "-editor.action.customEditor.redo",
    "when": "focusedCustomEditorIsEditable && !inputFocus"
  },
  {
    "key": "shift+cmd+z",
    "command": "-editor.action.webvieweditor.redo",
    "when": "!editorFocus && !inputFocus && !webviewHasOwnEditFunctions && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "shift+cmd+z",
    "command": "-redo",
    "when": "textInputFocus && !editorReadonly"
  }
]
